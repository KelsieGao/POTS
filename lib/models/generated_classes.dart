// ignore_for_file: non_constant_identifier_names, camel_case_types, file_namesimport, file_names, unnecessary_null_comparison,prefer_null_aware_operators

// WARNING: This code is auto-generated by Supadart.
// WARNING: Modifications may be overwritten. Please make changes in the SupaDart configuration.

// SDK
import 'package:supabase_flutter/supabase_flutter.dart';

// No geobase needed
// INTL is an official package from Dart and is used for parsing dates
// flutter pub add intl or dart pub add intl
import 'package:intl/intl.dart';

// No Dart Convert needed
// Supadart Class
abstract class SupadartClass<T> {
  static Map<String, dynamic> insert(Map<String, dynamic> data) {
    throw UnimplementedError();
  }

  static Map<String, dynamic> update(Map<String, dynamic> data) {
    throw UnimplementedError();
  }

  factory SupadartClass.fromJson(Map<String, dynamic> json) {
    throw UnimplementedError();
  }

  static converter(List<Map<String, dynamic>> data) {
    throw UnimplementedError();
  }

  static converterSingle(Map<String, dynamic> data) {
    throw UnimplementedError();
  }
}

// Supabase Client Extension
extension SupadartClient on SupabaseClient {
  SupabaseQueryBuilder get heartrate_hourly_summary =>
      from('heartrate_hourly_summary');
  SupabaseQueryBuilder get devices => from('devices');
  SupabaseQueryBuilder get standup_tests => from('standup_tests');
  SupabaseQueryBuilder get system_logs => from('system_logs');
  SupabaseQueryBuilder get voss_questionnaires => from('voss_questionnaires');
  SupabaseQueryBuilder get data_sessions => from('data_sessions');
  SupabaseQueryBuilder get accelerometer_data => from('accelerometer_data');
  SupabaseQueryBuilder get symptom_logs => from('symptom_logs');
  SupabaseQueryBuilder get patients => from('patients');
  SupabaseQueryBuilder get heartrate_data => from('heartrate_data');
}

// Supabase Storage Client Extension
extension SupadartStorageClient on SupabaseStorageClient {}

// Enums

// Utils
extension DurationFromString on Duration {
  static Duration fromString(String str) {
    final parts = str.split(':');
    final hours = int.parse(parts[0]);
    final minutes = int.parse(parts[1]);
    final secondsAndMilliseconds = parts[2].split('.');
    final seconds = int.parse(secondsAndMilliseconds[0]);
    final milliseconds = secondsAndMilliseconds.length > 1
        ? int.parse(secondsAndMilliseconds[1])
        : 0;

    return Duration(
      hours: hours,
      minutes: minutes,
      seconds: seconds,
      milliseconds: milliseconds,
    );
  }
}

class HeartrateHourlySummary implements SupadartClass<HeartrateHourlySummary> {
  final String id;
  final String? patientId;
  final DateTime hourTimestamp;
  final double? avgHr;
  final int? minHr;
  final int? maxHr;
  final int? sampleCount;
  final double? hrVariability;
  final double? restingHr;
  final DateTime? createdAt;

  const HeartrateHourlySummary({
    required this.id,
    this.patientId,
    required this.hourTimestamp,
    this.avgHr,
    this.minHr,
    this.maxHr,
    this.sampleCount,
    this.hrVariability,
    this.restingHr,
    this.createdAt,
  });

  static String get table_name => 'heartrate_hourly_summary';
  static String get c_id => 'id';
  static String get c_patientId => 'patient_id';
  static String get c_hourTimestamp => 'hour_timestamp';
  static String get c_avgHr => 'avg_hr';
  static String get c_minHr => 'min_hr';
  static String get c_maxHr => 'max_hr';
  static String get c_sampleCount => 'sample_count';
  static String get c_hrVariability => 'hr_variability';
  static String get c_restingHr => 'resting_hr';
  static String get c_createdAt => 'created_at';

  static List<HeartrateHourlySummary> converter(
    List<Map<String, dynamic>> data,
  ) {
    return data.map(HeartrateHourlySummary.fromJson).toList();
  }

  static HeartrateHourlySummary converterSingle(Map<String, dynamic> data) {
    return HeartrateHourlySummary.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? patientId,
    DateTime? hourTimestamp,
    double? avgHr,
    int? minHr,
    int? maxHr,
    int? sampleCount,
    double? hrVariability,
    double? restingHr,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (patientId != null) 'patient_id': patientId,
      if (hourTimestamp != null)
        'hour_timestamp': hourTimestamp.toUtc().toIso8601String(),
      if (avgHr != null) 'avg_hr': avgHr.toString(),
      if (minHr != null) 'min_hr': minHr,
      if (maxHr != null) 'max_hr': maxHr,
      if (sampleCount != null) 'sample_count': sampleCount,
      if (hrVariability != null) 'hr_variability': hrVariability.toString(),
      if (restingHr != null) 'resting_hr': restingHr.toString(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    String? patientId,
    required DateTime hourTimestamp,
    double? avgHr,
    int? minHr,
    int? maxHr,
    int? sampleCount,
    double? hrVariability,
    double? restingHr,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      hourTimestamp: hourTimestamp,
      avgHr: avgHr,
      minHr: minHr,
      maxHr: maxHr,
      sampleCount: sampleCount,
      hrVariability: hrVariability,
      restingHr: restingHr,
      createdAt: createdAt,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? patientId,
    DateTime? hourTimestamp,
    double? avgHr,
    int? minHr,
    int? maxHr,
    int? sampleCount,
    double? hrVariability,
    double? restingHr,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      hourTimestamp: hourTimestamp,
      avgHr: avgHr,
      minHr: minHr,
      maxHr: maxHr,
      sampleCount: sampleCount,
      hrVariability: hrVariability,
      restingHr: restingHr,
      createdAt: createdAt,
    );
  }

  factory HeartrateHourlySummary.fromJson(Map<String, dynamic> jsonn) {
    return HeartrateHourlySummary(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      patientId: jsonn['patient_id'] != null
          ? jsonn['patient_id'].toString()
          : null,
      hourTimestamp: jsonn['hour_timestamp'] != null
          ? DateTime.parse(jsonn['hour_timestamp'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      avgHr: jsonn['avg_hr'] != null
          ? double.parse(jsonn['avg_hr'].toString())
          : null,
      minHr: jsonn['min_hr'] != null
          ? int.parse(jsonn['min_hr'].toString())
          : null,
      maxHr: jsonn['max_hr'] != null
          ? int.parse(jsonn['max_hr'].toString())
          : null,
      sampleCount: jsonn['sample_count'] != null
          ? int.parse(jsonn['sample_count'].toString())
          : null,
      hrVariability: jsonn['hr_variability'] != null
          ? double.parse(jsonn['hr_variability'].toString())
          : null,
      restingHr: jsonn['resting_hr'] != null
          ? double.parse(jsonn['resting_hr'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      patientId: patientId,
      hourTimestamp: hourTimestamp,
      avgHr: avgHr,
      minHr: minHr,
      maxHr: maxHr,
      sampleCount: sampleCount,
      hrVariability: hrVariability,
      restingHr: restingHr,
      createdAt: createdAt,
    );
  }
}

class Devices implements SupadartClass<Devices> {
  final String id;
  final String? patientId;
  final String deviceId;
  final String? deviceName;
  final String? deviceType;
  final int? batteryLevel;
  final String? firmwareVersion;
  final DateTime? lastSync;
  final bool? isActive;
  final int? totalRecordingHours;
  final DateTime? lastMaintenanceDate;
  final DateTime? createdAt;

  const Devices({
    required this.id,
    this.patientId,
    required this.deviceId,
    this.deviceName,
    this.deviceType,
    this.batteryLevel,
    this.firmwareVersion,
    this.lastSync,
    this.isActive,
    this.totalRecordingHours,
    this.lastMaintenanceDate,
    this.createdAt,
  });

  static String get table_name => 'devices';
  static String get c_id => 'id';
  static String get c_patientId => 'patient_id';
  static String get c_deviceId => 'device_id';
  static String get c_deviceName => 'device_name';
  static String get c_deviceType => 'device_type';
  static String get c_batteryLevel => 'battery_level';
  static String get c_firmwareVersion => 'firmware_version';
  static String get c_lastSync => 'last_sync';
  static String get c_isActive => 'is_active';
  static String get c_totalRecordingHours => 'total_recording_hours';
  static String get c_lastMaintenanceDate => 'last_maintenance_date';
  static String get c_createdAt => 'created_at';

  static List<Devices> converter(List<Map<String, dynamic>> data) {
    return data.map(Devices.fromJson).toList();
  }

  static Devices converterSingle(Map<String, dynamic> data) {
    return Devices.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? patientId,
    String? deviceId,
    String? deviceName,
    String? deviceType,
    int? batteryLevel,
    String? firmwareVersion,
    DateTime? lastSync,
    bool? isActive,
    int? totalRecordingHours,
    DateTime? lastMaintenanceDate,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (patientId != null) 'patient_id': patientId,
      if (deviceId != null) 'device_id': deviceId,
      if (deviceName != null) 'device_name': deviceName,
      if (deviceType != null) 'device_type': deviceType,
      if (batteryLevel != null) 'battery_level': batteryLevel,
      if (firmwareVersion != null) 'firmware_version': firmwareVersion,
      if (lastSync != null) 'last_sync': lastSync.toUtc().toIso8601String(),
      if (isActive != null) 'is_active': isActive,
      if (totalRecordingHours != null)
        'total_recording_hours': totalRecordingHours,
      if (lastMaintenanceDate != null)
        'last_maintenance_date': lastMaintenanceDate.toIso8601String(),
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    String? patientId,
    required String deviceId,
    String? deviceName,
    String? deviceType,
    int? batteryLevel,
    String? firmwareVersion,
    DateTime? lastSync,
    bool? isActive,
    int? totalRecordingHours,
    DateTime? lastMaintenanceDate,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      deviceId: deviceId,
      deviceName: deviceName,
      deviceType: deviceType,
      batteryLevel: batteryLevel,
      firmwareVersion: firmwareVersion,
      lastSync: lastSync,
      isActive: isActive,
      totalRecordingHours: totalRecordingHours,
      lastMaintenanceDate: lastMaintenanceDate,
      createdAt: createdAt,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? patientId,
    String? deviceId,
    String? deviceName,
    String? deviceType,
    int? batteryLevel,
    String? firmwareVersion,
    DateTime? lastSync,
    bool? isActive,
    int? totalRecordingHours,
    DateTime? lastMaintenanceDate,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      deviceId: deviceId,
      deviceName: deviceName,
      deviceType: deviceType,
      batteryLevel: batteryLevel,
      firmwareVersion: firmwareVersion,
      lastSync: lastSync,
      isActive: isActive,
      totalRecordingHours: totalRecordingHours,
      lastMaintenanceDate: lastMaintenanceDate,
      createdAt: createdAt,
    );
  }

  factory Devices.fromJson(Map<String, dynamic> jsonn) {
    return Devices(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      patientId: jsonn['patient_id'] != null
          ? jsonn['patient_id'].toString()
          : null,
      deviceId: jsonn['device_id'] != null ? jsonn['device_id'].toString() : '',
      deviceName: jsonn['device_name'] != null
          ? jsonn['device_name'].toString()
          : null,
      deviceType: jsonn['device_type'] != null
          ? jsonn['device_type'].toString()
          : null,
      batteryLevel: jsonn['battery_level'] != null
          ? int.parse(jsonn['battery_level'].toString())
          : null,
      firmwareVersion: jsonn['firmware_version'] != null
          ? jsonn['firmware_version'].toString()
          : null,
      lastSync: jsonn['last_sync'] != null
          ? DateTime.parse(jsonn['last_sync'].toString())
          : null,
      isActive: jsonn['is_active'] != null ? jsonn['is_active'] as bool : null,
      totalRecordingHours: jsonn['total_recording_hours'] != null
          ? int.parse(jsonn['total_recording_hours'].toString())
          : null,
      lastMaintenanceDate: jsonn['last_maintenance_date'] != null
          ? DateTime.parse(jsonn['last_maintenance_date'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      patientId: patientId,
      deviceId: deviceId,
      deviceName: deviceName,
      deviceType: deviceType,
      batteryLevel: batteryLevel,
      firmwareVersion: firmwareVersion,
      lastSync: lastSync,
      isActive: isActive,
      totalRecordingHours: totalRecordingHours,
      lastMaintenanceDate: lastMaintenanceDate,
      createdAt: createdAt,
    );
  }
}

class StandupTests implements SupadartClass<StandupTests> {
  final String id;
  final String? patientId;
  final DateTime testDate;
  final DateTime testTime;
  final int? supineHr;
  final int? supineSystolic;
  final int? supineDiastolic;
  final int? supineDurationMinutes;
  final int? standing1minHr;
  final int? standing1minSystolic;
  final int? standing1minDiastolic;
  final int? standing3minHr;
  final int? standing3minSystolic;
  final int? standing3minDiastolic;
  final int? standing5minHr;
  final int? standing10minHr;
  final int? hrIncrease1min;
  final int? hrIncrease3min;
  final int? hrIncrease5min;
  final int? hrIncrease10min;
  final int? systolicDrop1min;
  final int? systolicDrop3min;
  final String? testResult;
  final String? potsSeverity;
  final String? notes;
  final num? roomTemperature;
  final int? timeSinceLastMeal;
  final String? medicationsTaken;
  final DateTime? createdAt;
  final String? questionnaireId;

  const StandupTests({
    required this.id,
    this.patientId,
    required this.testDate,
    required this.testTime,
    this.supineHr,
    this.supineSystolic,
    this.supineDiastolic,
    this.supineDurationMinutes,
    this.standing1minHr,
    this.standing1minSystolic,
    this.standing1minDiastolic,
    this.standing3minHr,
    this.standing3minSystolic,
    this.standing3minDiastolic,
    this.standing5minHr,
    this.standing10minHr,
    this.hrIncrease1min,
    this.hrIncrease3min,
    this.hrIncrease5min,
    this.hrIncrease10min,
    this.systolicDrop1min,
    this.systolicDrop3min,
    this.testResult,
    this.potsSeverity,
    this.notes,
    this.roomTemperature,
    this.timeSinceLastMeal,
    this.medicationsTaken,
    this.createdAt,
    this.questionnaireId,
  });

  static String get table_name => 'standup_tests';
  static String get c_id => 'id';
  static String get c_patientId => 'patient_id';
  static String get c_testDate => 'test_date';
  static String get c_testTime => 'test_time';
  static String get c_supineHr => 'supine_hr';
  static String get c_supineSystolic => 'supine_systolic';
  static String get c_supineDiastolic => 'supine_diastolic';
  static String get c_supineDurationMinutes => 'supine_duration_minutes';
  static String get c_standing1minHr => 'standing_1min_hr';
  static String get c_standing1minSystolic => 'standing_1min_systolic';
  static String get c_standing1minDiastolic => 'standing_1min_diastolic';
  static String get c_standing3minHr => 'standing_3min_hr';
  static String get c_standing3minSystolic => 'standing_3min_systolic';
  static String get c_standing3minDiastolic => 'standing_3min_diastolic';
  static String get c_standing5minHr => 'standing_5min_hr';
  static String get c_standing10minHr => 'standing_10min_hr';
  static String get c_hrIncrease1min => 'hr_increase_1min';
  static String get c_hrIncrease3min => 'hr_increase_3min';
  static String get c_hrIncrease5min => 'hr_increase_5min';
  static String get c_hrIncrease10min => 'hr_increase_10min';
  static String get c_systolicDrop1min => 'systolic_drop_1min';
  static String get c_systolicDrop3min => 'systolic_drop_3min';
  static String get c_testResult => 'test_result';
  static String get c_potsSeverity => 'pots_severity';
  static String get c_notes => 'notes';
  static String get c_roomTemperature => 'room_temperature';
  static String get c_timeSinceLastMeal => 'time_since_last_meal';
  static String get c_medicationsTaken => 'medications_taken';
  static String get c_createdAt => 'created_at';
  static String get c_questionnaireId => 'questionnaire_id';

  static List<StandupTests> converter(List<Map<String, dynamic>> data) {
    return data.map(StandupTests.fromJson).toList();
  }

  static StandupTests converterSingle(Map<String, dynamic> data) {
    return StandupTests.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? patientId,
    DateTime? testDate,
    DateTime? testTime,
    int? supineHr,
    int? supineSystolic,
    int? supineDiastolic,
    int? supineDurationMinutes,
    int? standing1minHr,
    int? standing1minSystolic,
    int? standing1minDiastolic,
    int? standing3minHr,
    int? standing3minSystolic,
    int? standing3minDiastolic,
    int? standing5minHr,
    int? standing10minHr,
    int? hrIncrease1min,
    int? hrIncrease3min,
    int? hrIncrease5min,
    int? hrIncrease10min,
    int? systolicDrop1min,
    int? systolicDrop3min,
    String? testResult,
    String? potsSeverity,
    String? notes,
    num? roomTemperature,
    int? timeSinceLastMeal,
    String? medicationsTaken,
    DateTime? createdAt,
    String? questionnaireId,
  }) {
    return {
      if (id != null) 'id': id,
      if (patientId != null) 'patient_id': patientId,
      if (testDate != null) 'test_date': testDate.toIso8601String(),
      if (testTime != null)
        'test_time': DateFormat('HH:mm:ss.SSS').format(testTime),
      if (supineHr != null) 'supine_hr': supineHr,
      if (supineSystolic != null) 'supine_systolic': supineSystolic,
      if (supineDiastolic != null) 'supine_diastolic': supineDiastolic,
      if (supineDurationMinutes != null)
        'supine_duration_minutes': supineDurationMinutes,
      if (standing1minHr != null) 'standing_1min_hr': standing1minHr,
      if (standing1minSystolic != null)
        'standing_1min_systolic': standing1minSystolic,
      if (standing1minDiastolic != null)
        'standing_1min_diastolic': standing1minDiastolic,
      if (standing3minHr != null) 'standing_3min_hr': standing3minHr,
      if (standing3minSystolic != null)
        'standing_3min_systolic': standing3minSystolic,
      if (standing3minDiastolic != null)
        'standing_3min_diastolic': standing3minDiastolic,
      if (standing5minHr != null) 'standing_5min_hr': standing5minHr,
      if (standing10minHr != null) 'standing_10min_hr': standing10minHr,
      if (hrIncrease1min != null) 'hr_increase_1min': hrIncrease1min,
      if (hrIncrease3min != null) 'hr_increase_3min': hrIncrease3min,
      if (hrIncrease5min != null) 'hr_increase_5min': hrIncrease5min,
      if (hrIncrease10min != null) 'hr_increase_10min': hrIncrease10min,
      if (systolicDrop1min != null) 'systolic_drop_1min': systolicDrop1min,
      if (systolicDrop3min != null) 'systolic_drop_3min': systolicDrop3min,
      if (testResult != null) 'test_result': testResult,
      if (potsSeverity != null) 'pots_severity': potsSeverity,
      if (notes != null) 'notes': notes,
      if (roomTemperature != null)
        'room_temperature': roomTemperature.toString(),
      if (timeSinceLastMeal != null) 'time_since_last_meal': timeSinceLastMeal,
      if (medicationsTaken != null) 'medications_taken': medicationsTaken,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (questionnaireId != null) 'questionnaire_id': questionnaireId,
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    String? patientId,
    required DateTime testDate,
    required DateTime testTime,
    int? supineHr,
    int? supineSystolic,
    int? supineDiastolic,
    int? supineDurationMinutes,
    int? standing1minHr,
    int? standing1minSystolic,
    int? standing1minDiastolic,
    int? standing3minHr,
    int? standing3minSystolic,
    int? standing3minDiastolic,
    int? standing5minHr,
    int? standing10minHr,
    int? hrIncrease1min,
    int? hrIncrease3min,
    int? hrIncrease5min,
    int? hrIncrease10min,
    int? systolicDrop1min,
    int? systolicDrop3min,
    String? testResult,
    String? potsSeverity,
    String? notes,
    num? roomTemperature,
    int? timeSinceLastMeal,
    String? medicationsTaken,
    DateTime? createdAt,
    String? questionnaireId,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      testDate: testDate,
      testTime: testTime,
      supineHr: supineHr,
      supineSystolic: supineSystolic,
      supineDiastolic: supineDiastolic,
      supineDurationMinutes: supineDurationMinutes,
      standing1minHr: standing1minHr,
      standing1minSystolic: standing1minSystolic,
      standing1minDiastolic: standing1minDiastolic,
      standing3minHr: standing3minHr,
      standing3minSystolic: standing3minSystolic,
      standing3minDiastolic: standing3minDiastolic,
      standing5minHr: standing5minHr,
      standing10minHr: standing10minHr,
      hrIncrease1min: hrIncrease1min,
      hrIncrease3min: hrIncrease3min,
      hrIncrease5min: hrIncrease5min,
      hrIncrease10min: hrIncrease10min,
      systolicDrop1min: systolicDrop1min,
      systolicDrop3min: systolicDrop3min,
      testResult: testResult,
      potsSeverity: potsSeverity,
      notes: notes,
      roomTemperature: roomTemperature,
      timeSinceLastMeal: timeSinceLastMeal,
      medicationsTaken: medicationsTaken,
      createdAt: createdAt,
      questionnaireId: questionnaireId,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? patientId,
    DateTime? testDate,
    DateTime? testTime,
    int? supineHr,
    int? supineSystolic,
    int? supineDiastolic,
    int? supineDurationMinutes,
    int? standing1minHr,
    int? standing1minSystolic,
    int? standing1minDiastolic,
    int? standing3minHr,
    int? standing3minSystolic,
    int? standing3minDiastolic,
    int? standing5minHr,
    int? standing10minHr,
    int? hrIncrease1min,
    int? hrIncrease3min,
    int? hrIncrease5min,
    int? hrIncrease10min,
    int? systolicDrop1min,
    int? systolicDrop3min,
    String? testResult,
    String? potsSeverity,
    String? notes,
    num? roomTemperature,
    int? timeSinceLastMeal,
    String? medicationsTaken,
    DateTime? createdAt,
    String? questionnaireId,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      testDate: testDate,
      testTime: testTime,
      supineHr: supineHr,
      supineSystolic: supineSystolic,
      supineDiastolic: supineDiastolic,
      supineDurationMinutes: supineDurationMinutes,
      standing1minHr: standing1minHr,
      standing1minSystolic: standing1minSystolic,
      standing1minDiastolic: standing1minDiastolic,
      standing3minHr: standing3minHr,
      standing3minSystolic: standing3minSystolic,
      standing3minDiastolic: standing3minDiastolic,
      standing5minHr: standing5minHr,
      standing10minHr: standing10minHr,
      hrIncrease1min: hrIncrease1min,
      hrIncrease3min: hrIncrease3min,
      hrIncrease5min: hrIncrease5min,
      hrIncrease10min: hrIncrease10min,
      systolicDrop1min: systolicDrop1min,
      systolicDrop3min: systolicDrop3min,
      testResult: testResult,
      potsSeverity: potsSeverity,
      notes: notes,
      roomTemperature: roomTemperature,
      timeSinceLastMeal: timeSinceLastMeal,
      medicationsTaken: medicationsTaken,
      createdAt: createdAt,
      questionnaireId: questionnaireId,
    );
  }

  factory StandupTests.fromJson(Map<String, dynamic> jsonn) {
    return StandupTests(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      patientId: jsonn['patient_id'] != null
          ? jsonn['patient_id'].toString()
          : null,
      testDate: jsonn['test_date'] != null
          ? DateTime.parse(jsonn['test_date'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      testTime: jsonn['test_time'] != null
          ? DateTime.parse("1970-01-01T${jsonn['test_time']}").toLocal()
          : DateTime.fromMillisecondsSinceEpoch(0),
      supineHr: jsonn['supine_hr'] != null
          ? int.parse(jsonn['supine_hr'].toString())
          : null,
      supineSystolic: jsonn['supine_systolic'] != null
          ? int.parse(jsonn['supine_systolic'].toString())
          : null,
      supineDiastolic: jsonn['supine_diastolic'] != null
          ? int.parse(jsonn['supine_diastolic'].toString())
          : null,
      supineDurationMinutes: jsonn['supine_duration_minutes'] != null
          ? int.parse(jsonn['supine_duration_minutes'].toString())
          : null,
      standing1minHr: jsonn['standing_1min_hr'] != null
          ? int.parse(jsonn['standing_1min_hr'].toString())
          : null,
      standing1minSystolic: jsonn['standing_1min_systolic'] != null
          ? int.parse(jsonn['standing_1min_systolic'].toString())
          : null,
      standing1minDiastolic: jsonn['standing_1min_diastolic'] != null
          ? int.parse(jsonn['standing_1min_diastolic'].toString())
          : null,
      standing3minHr: jsonn['standing_3min_hr'] != null
          ? int.parse(jsonn['standing_3min_hr'].toString())
          : null,
      standing3minSystolic: jsonn['standing_3min_systolic'] != null
          ? int.parse(jsonn['standing_3min_systolic'].toString())
          : null,
      standing3minDiastolic: jsonn['standing_3min_diastolic'] != null
          ? int.parse(jsonn['standing_3min_diastolic'].toString())
          : null,
      standing5minHr: jsonn['standing_5min_hr'] != null
          ? int.parse(jsonn['standing_5min_hr'].toString())
          : null,
      standing10minHr: jsonn['standing_10min_hr'] != null
          ? int.parse(jsonn['standing_10min_hr'].toString())
          : null,
      hrIncrease1min: jsonn['hr_increase_1min'] != null
          ? int.parse(jsonn['hr_increase_1min'].toString())
          : null,
      hrIncrease3min: jsonn['hr_increase_3min'] != null
          ? int.parse(jsonn['hr_increase_3min'].toString())
          : null,
      hrIncrease5min: jsonn['hr_increase_5min'] != null
          ? int.parse(jsonn['hr_increase_5min'].toString())
          : null,
      hrIncrease10min: jsonn['hr_increase_10min'] != null
          ? int.parse(jsonn['hr_increase_10min'].toString())
          : null,
      systolicDrop1min: jsonn['systolic_drop_1min'] != null
          ? int.parse(jsonn['systolic_drop_1min'].toString())
          : null,
      systolicDrop3min: jsonn['systolic_drop_3min'] != null
          ? int.parse(jsonn['systolic_drop_3min'].toString())
          : null,
      testResult: jsonn['test_result'] != null
          ? jsonn['test_result'].toString()
          : null,
      potsSeverity: jsonn['pots_severity'] != null
          ? jsonn['pots_severity'].toString()
          : null,
      notes: jsonn['notes'] != null ? jsonn['notes'].toString() : null,
      roomTemperature: jsonn['room_temperature'] != null
          ? num.parse(jsonn['room_temperature'].toString())
          : null,
      timeSinceLastMeal: jsonn['time_since_last_meal'] != null
          ? int.parse(jsonn['time_since_last_meal'].toString())
          : null,
      medicationsTaken: jsonn['medications_taken'] != null
          ? jsonn['medications_taken'].toString()
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      questionnaireId: jsonn['questionnaire_id'] != null
          ? jsonn['questionnaire_id'].toString()
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      patientId: patientId,
      testDate: testDate,
      testTime: testTime,
      supineHr: supineHr,
      supineSystolic: supineSystolic,
      supineDiastolic: supineDiastolic,
      supineDurationMinutes: supineDurationMinutes,
      standing1minHr: standing1minHr,
      standing1minSystolic: standing1minSystolic,
      standing1minDiastolic: standing1minDiastolic,
      standing3minHr: standing3minHr,
      standing3minSystolic: standing3minSystolic,
      standing3minDiastolic: standing3minDiastolic,
      standing5minHr: standing5minHr,
      standing10minHr: standing10minHr,
      hrIncrease1min: hrIncrease1min,
      hrIncrease3min: hrIncrease3min,
      hrIncrease5min: hrIncrease5min,
      hrIncrease10min: hrIncrease10min,
      systolicDrop1min: systolicDrop1min,
      systolicDrop3min: systolicDrop3min,
      testResult: testResult,
      potsSeverity: potsSeverity,
      notes: notes,
      roomTemperature: roomTemperature,
      timeSinceLastMeal: timeSinceLastMeal,
      medicationsTaken: medicationsTaken,
      createdAt: createdAt,
      questionnaireId: questionnaireId,
    );
  }
}

class SystemLogs implements SupadartClass<SystemLogs> {
  final String id;
  final String action;
  final String? details;
  final DateTime? createdAt;

  const SystemLogs({
    required this.id,
    required this.action,
    this.details,
    this.createdAt,
  });

  static String get table_name => 'system_logs';
  static String get c_id => 'id';
  static String get c_action => 'action';
  static String get c_details => 'details';
  static String get c_createdAt => 'created_at';

  static List<SystemLogs> converter(List<Map<String, dynamic>> data) {
    return data.map(SystemLogs.fromJson).toList();
  }

  static SystemLogs converterSingle(Map<String, dynamic> data) {
    return SystemLogs.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? action,
    String? details,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (action != null) 'action': action,
      if (details != null) 'details': details,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    required String action,
    String? details,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      action: action,
      details: details,
      createdAt: createdAt,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? action,
    String? details,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      action: action,
      details: details,
      createdAt: createdAt,
    );
  }

  factory SystemLogs.fromJson(Map<String, dynamic> jsonn) {
    return SystemLogs(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      action: jsonn['action'] != null ? jsonn['action'].toString() : '',
      details: jsonn['details'] != null ? jsonn['details'].toString() : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      action: action,
      details: details,
      createdAt: createdAt,
    );
  }
}

class VossQuestionnaires implements SupadartClass<VossQuestionnaires> {
  final String id;
  final String? patientId;
  final DateTime completedAt;
  final int? symptomFrequency;
  final int? symptomSeverity;
  final int? dizzinessFrequency;
  final int? fatigueLevel;
  final int? orthostaticIntolerance;
  final int? cognitiveSymptoms;
  final int? sleepQuality;
  final int? totalScore;
  final String? interpretation;
  final String? notes;
  final DateTime? createdAt;

  const VossQuestionnaires({
    required this.id,
    this.patientId,
    required this.completedAt,
    this.symptomFrequency,
    this.symptomSeverity,
    this.dizzinessFrequency,
    this.fatigueLevel,
    this.orthostaticIntolerance,
    this.cognitiveSymptoms,
    this.sleepQuality,
    this.totalScore,
    this.interpretation,
    this.notes,
    this.createdAt,
  });

  static String get table_name => 'voss_questionnaires';
  static String get c_id => 'id';
  static String get c_patientId => 'patient_id';
  static String get c_completedAt => 'completed_at';
  static String get c_symptomFrequency => 'symptom_frequency';
  static String get c_symptomSeverity => 'symptom_severity';
  static String get c_dizzinessFrequency => 'dizziness_frequency';
  static String get c_fatigueLevel => 'fatigue_level';
  static String get c_orthostaticIntolerance => 'orthostatic_intolerance';
  static String get c_cognitiveSymptoms => 'cognitive_symptoms';
  static String get c_sleepQuality => 'sleep_quality';
  static String get c_totalScore => 'total_score';
  static String get c_interpretation => 'interpretation';
  static String get c_notes => 'notes';
  static String get c_createdAt => 'created_at';

  static List<VossQuestionnaires> converter(List<Map<String, dynamic>> data) {
    return data.map(VossQuestionnaires.fromJson).toList();
  }

  static VossQuestionnaires converterSingle(Map<String, dynamic> data) {
    return VossQuestionnaires.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? patientId,
    DateTime? completedAt,
    int? symptomFrequency,
    int? symptomSeverity,
    int? dizzinessFrequency,
    int? fatigueLevel,
    int? orthostaticIntolerance,
    int? cognitiveSymptoms,
    int? sleepQuality,
    int? totalScore,
    String? interpretation,
    String? notes,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (patientId != null) 'patient_id': patientId,
      if (completedAt != null)
        'completed_at': completedAt.toUtc().toIso8601String(),
      if (symptomFrequency != null) 'symptom_frequency': symptomFrequency,
      if (symptomSeverity != null) 'symptom_severity': symptomSeverity,
      if (dizzinessFrequency != null) 'dizziness_frequency': dizzinessFrequency,
      if (fatigueLevel != null) 'fatigue_level': fatigueLevel,
      if (orthostaticIntolerance != null)
        'orthostatic_intolerance': orthostaticIntolerance,
      if (cognitiveSymptoms != null) 'cognitive_symptoms': cognitiveSymptoms,
      if (sleepQuality != null) 'sleep_quality': sleepQuality,
      if (totalScore != null) 'total_score': totalScore,
      if (interpretation != null) 'interpretation': interpretation,
      if (notes != null) 'notes': notes,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    String? patientId,
    required DateTime completedAt,
    int? symptomFrequency,
    int? symptomSeverity,
    int? dizzinessFrequency,
    int? fatigueLevel,
    int? orthostaticIntolerance,
    int? cognitiveSymptoms,
    int? sleepQuality,
    int? totalScore,
    String? interpretation,
    String? notes,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      completedAt: completedAt,
      symptomFrequency: symptomFrequency,
      symptomSeverity: symptomSeverity,
      dizzinessFrequency: dizzinessFrequency,
      fatigueLevel: fatigueLevel,
      orthostaticIntolerance: orthostaticIntolerance,
      cognitiveSymptoms: cognitiveSymptoms,
      sleepQuality: sleepQuality,
      totalScore: totalScore,
      interpretation: interpretation,
      notes: notes,
      createdAt: createdAt,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? patientId,
    DateTime? completedAt,
    int? symptomFrequency,
    int? symptomSeverity,
    int? dizzinessFrequency,
    int? fatigueLevel,
    int? orthostaticIntolerance,
    int? cognitiveSymptoms,
    int? sleepQuality,
    int? totalScore,
    String? interpretation,
    String? notes,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      completedAt: completedAt,
      symptomFrequency: symptomFrequency,
      symptomSeverity: symptomSeverity,
      dizzinessFrequency: dizzinessFrequency,
      fatigueLevel: fatigueLevel,
      orthostaticIntolerance: orthostaticIntolerance,
      cognitiveSymptoms: cognitiveSymptoms,
      sleepQuality: sleepQuality,
      totalScore: totalScore,
      interpretation: interpretation,
      notes: notes,
      createdAt: createdAt,
    );
  }

  factory VossQuestionnaires.fromJson(Map<String, dynamic> jsonn) {
    return VossQuestionnaires(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      patientId: jsonn['patient_id'] != null
          ? jsonn['patient_id'].toString()
          : null,
      completedAt: jsonn['completed_at'] != null
          ? DateTime.parse(jsonn['completed_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      symptomFrequency: jsonn['symptom_frequency'] != null
          ? int.parse(jsonn['symptom_frequency'].toString())
          : null,
      symptomSeverity: jsonn['symptom_severity'] != null
          ? int.parse(jsonn['symptom_severity'].toString())
          : null,
      dizzinessFrequency: jsonn['dizziness_frequency'] != null
          ? int.parse(jsonn['dizziness_frequency'].toString())
          : null,
      fatigueLevel: jsonn['fatigue_level'] != null
          ? int.parse(jsonn['fatigue_level'].toString())
          : null,
      orthostaticIntolerance: jsonn['orthostatic_intolerance'] != null
          ? int.parse(jsonn['orthostatic_intolerance'].toString())
          : null,
      cognitiveSymptoms: jsonn['cognitive_symptoms'] != null
          ? int.parse(jsonn['cognitive_symptoms'].toString())
          : null,
      sleepQuality: jsonn['sleep_quality'] != null
          ? int.parse(jsonn['sleep_quality'].toString())
          : null,
      totalScore: jsonn['total_score'] != null
          ? int.parse(jsonn['total_score'].toString())
          : null,
      interpretation: jsonn['interpretation'] != null
          ? jsonn['interpretation'].toString()
          : null,
      notes: jsonn['notes'] != null ? jsonn['notes'].toString() : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      patientId: patientId,
      completedAt: completedAt,
      symptomFrequency: symptomFrequency,
      symptomSeverity: symptomSeverity,
      dizzinessFrequency: dizzinessFrequency,
      fatigueLevel: fatigueLevel,
      orthostaticIntolerance: orthostaticIntolerance,
      cognitiveSymptoms: cognitiveSymptoms,
      sleepQuality: sleepQuality,
      totalScore: totalScore,
      interpretation: interpretation,
      notes: notes,
      createdAt: createdAt,
    );
  }
}

class DataSessions implements SupadartClass<DataSessions> {
  final String id;
  final String patientId;
  final String deviceId;
  final DateTime sessionStart;
  final DateTime? sessionEnd;
  final String sessionType;
  final int? totalHrSamples;
  final int? totalAccSamples;
  final DateTime? createdAt;
  final DateTime? updatedAt;

  const DataSessions({
    required this.id,
    required this.patientId,
    required this.deviceId,
    required this.sessionStart,
    this.sessionEnd,
    required this.sessionType,
    this.totalHrSamples,
    this.totalAccSamples,
    this.createdAt,
    this.updatedAt,
  });

  static String get table_name => 'data_sessions';
  static String get c_id => 'id';
  static String get c_patientId => 'patient_id';
  static String get c_deviceId => 'device_id';
  static String get c_sessionStart => 'session_start';
  static String get c_sessionEnd => 'session_end';
  static String get c_sessionType => 'session_type';
  static String get c_totalHrSamples => 'total_hr_samples';
  static String get c_totalAccSamples => 'total_acc_samples';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';

  static List<DataSessions> converter(List<Map<String, dynamic>> data) {
    return data.map(DataSessions.fromJson).toList();
  }

  static DataSessions converterSingle(Map<String, dynamic> data) {
    return DataSessions.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? patientId,
    String? deviceId,
    DateTime? sessionStart,
    DateTime? sessionEnd,
    String? sessionType,
    int? totalHrSamples,
    int? totalAccSamples,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (patientId != null) 'patient_id': patientId,
      if (deviceId != null) 'device_id': deviceId,
      if (sessionStart != null)
        'session_start': sessionStart.toUtc().toIso8601String(),
      if (sessionEnd != null)
        'session_end': sessionEnd.toUtc().toIso8601String(),
      if (sessionType != null) 'session_type': sessionType,
      if (totalHrSamples != null) 'total_hr_samples': totalHrSamples,
      if (totalAccSamples != null) 'total_acc_samples': totalAccSamples,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    required String patientId,
    required String deviceId,
    required DateTime sessionStart,
    DateTime? sessionEnd,
    String? sessionType,
    int? totalHrSamples,
    int? totalAccSamples,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      deviceId: deviceId,
      sessionStart: sessionStart,
      sessionEnd: sessionEnd,
      sessionType: sessionType,
      totalHrSamples: totalHrSamples,
      totalAccSamples: totalAccSamples,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? patientId,
    String? deviceId,
    DateTime? sessionStart,
    DateTime? sessionEnd,
    String? sessionType,
    int? totalHrSamples,
    int? totalAccSamples,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      deviceId: deviceId,
      sessionStart: sessionStart,
      sessionEnd: sessionEnd,
      sessionType: sessionType,
      totalHrSamples: totalHrSamples,
      totalAccSamples: totalAccSamples,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }

  factory DataSessions.fromJson(Map<String, dynamic> jsonn) {
    return DataSessions(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      patientId: jsonn['patient_id'] != null
          ? jsonn['patient_id'].toString()
          : '',
      deviceId: jsonn['device_id'] != null ? jsonn['device_id'].toString() : '',
      sessionStart: jsonn['session_start'] != null
          ? DateTime.parse(jsonn['session_start'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      sessionEnd: jsonn['session_end'] != null
          ? DateTime.parse(jsonn['session_end'].toString())
          : null,
      sessionType: jsonn['session_type'] != null
          ? jsonn['session_type'].toString()
          : '',
      totalHrSamples: jsonn['total_hr_samples'] != null
          ? int.parse(jsonn['total_hr_samples'].toString())
          : null,
      totalAccSamples: jsonn['total_acc_samples'] != null
          ? int.parse(jsonn['total_acc_samples'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      patientId: patientId,
      deviceId: deviceId,
      sessionStart: sessionStart,
      sessionEnd: sessionEnd,
      sessionType: sessionType,
      totalHrSamples: totalHrSamples,
      totalAccSamples: totalAccSamples,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }
}

class AccelerometerData implements SupadartClass<AccelerometerData> {
  final String id;
  final String? patientId;
  final String deviceId;
  final DateTime recordedAt;
  final double x;
  final double y;
  final double z;
  final double? magnitude;
  final String? activityType;
  final DateTime? createdAt;

  const AccelerometerData({
    required this.id,
    this.patientId,
    required this.deviceId,
    required this.recordedAt,
    required this.x,
    required this.y,
    required this.z,
    this.magnitude,
    this.activityType,
    this.createdAt,
  });

  static String get table_name => 'accelerometer_data';
  static String get c_id => 'id';
  static String get c_patientId => 'patient_id';
  static String get c_deviceId => 'device_id';
  static String get c_recordedAt => 'recorded_at';
  static String get c_x => 'x';
  static String get c_y => 'y';
  static String get c_z => 'z';
  static String get c_magnitude => 'magnitude';
  static String get c_activityType => 'activity_type';
  static String get c_createdAt => 'created_at';

  static List<AccelerometerData> converter(List<Map<String, dynamic>> data) {
    return data.map(AccelerometerData.fromJson).toList();
  }

  static AccelerometerData converterSingle(Map<String, dynamic> data) {
    return AccelerometerData.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? patientId,
    String? deviceId,
    DateTime? recordedAt,
    double? x,
    double? y,
    double? z,
    double? magnitude,
    String? activityType,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (patientId != null) 'patient_id': patientId,
      if (deviceId != null) 'device_id': deviceId,
      if (recordedAt != null)
        'recorded_at': recordedAt.toUtc().toIso8601String(),
      if (x != null) 'x': x.toString(),
      if (y != null) 'y': y.toString(),
      if (z != null) 'z': z.toString(),
      if (magnitude != null) 'magnitude': magnitude.toString(),
      if (activityType != null) 'activity_type': activityType,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    String? patientId,
    required String deviceId,
    required DateTime recordedAt,
    required double x,
    required double y,
    required double z,
    double? magnitude,
    String? activityType,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      deviceId: deviceId,
      recordedAt: recordedAt,
      x: x,
      y: y,
      z: z,
      magnitude: magnitude,
      activityType: activityType,
      createdAt: createdAt,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? patientId,
    String? deviceId,
    DateTime? recordedAt,
    double? x,
    double? y,
    double? z,
    double? magnitude,
    String? activityType,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      deviceId: deviceId,
      recordedAt: recordedAt,
      x: x,
      y: y,
      z: z,
      magnitude: magnitude,
      activityType: activityType,
      createdAt: createdAt,
    );
  }

  factory AccelerometerData.fromJson(Map<String, dynamic> jsonn) {
    return AccelerometerData(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      patientId: jsonn['patient_id'] != null
          ? jsonn['patient_id'].toString()
          : null,
      deviceId: jsonn['device_id'] != null ? jsonn['device_id'].toString() : '',
      recordedAt: jsonn['recorded_at'] != null
          ? DateTime.parse(jsonn['recorded_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      x: jsonn['x'] != null ? double.parse(jsonn['x'].toString()) : 0.0,
      y: jsonn['y'] != null ? double.parse(jsonn['y'].toString()) : 0.0,
      z: jsonn['z'] != null ? double.parse(jsonn['z'].toString()) : 0.0,
      magnitude: jsonn['magnitude'] != null
          ? double.parse(jsonn['magnitude'].toString())
          : null,
      activityType: jsonn['activity_type'] != null
          ? jsonn['activity_type'].toString()
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      patientId: patientId,
      deviceId: deviceId,
      recordedAt: recordedAt,
      x: x,
      y: y,
      z: z,
      magnitude: magnitude,
      activityType: activityType,
      createdAt: createdAt,
    );
  }
}

class SymptomLogs implements SupadartClass<SymptomLogs> {
  final String id;
  final String? patientId;
  final DateTime loggedAt;
  final String symptomType;
  final int severity;
  final int? durationMinutes;
  final String? position;
  final List<String>? triggerFactors;
  final int? hrDuringSymptom;
  final int? bpDuringSymptomSystolic;
  final int? bpDuringSymptomDiastolic;
  final String? notes;
  final DateTime? createdAt;

  const SymptomLogs({
    required this.id,
    this.patientId,
    required this.loggedAt,
    required this.symptomType,
    required this.severity,
    this.durationMinutes,
    this.position,
    this.triggerFactors,
    this.hrDuringSymptom,
    this.bpDuringSymptomSystolic,
    this.bpDuringSymptomDiastolic,
    this.notes,
    this.createdAt,
  });

  static String get table_name => 'symptom_logs';
  static String get c_id => 'id';
  static String get c_patientId => 'patient_id';
  static String get c_loggedAt => 'logged_at';
  static String get c_symptomType => 'symptom_type';
  static String get c_severity => 'severity';
  static String get c_durationMinutes => 'duration_minutes';
  static String get c_position => 'position';
  static String get c_triggerFactors => 'trigger_factors';
  static String get c_hrDuringSymptom => 'hr_during_symptom';
  static String get c_bpDuringSymptomSystolic => 'bp_during_symptom_systolic';
  static String get c_bpDuringSymptomDiastolic => 'bp_during_symptom_diastolic';
  static String get c_notes => 'notes';
  static String get c_createdAt => 'created_at';

  static List<SymptomLogs> converter(List<Map<String, dynamic>> data) {
    return data.map(SymptomLogs.fromJson).toList();
  }

  static SymptomLogs converterSingle(Map<String, dynamic> data) {
    return SymptomLogs.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? patientId,
    DateTime? loggedAt,
    String? symptomType,
    int? severity,
    int? durationMinutes,
    String? position,
    List<String>? triggerFactors,
    int? hrDuringSymptom,
    int? bpDuringSymptomSystolic,
    int? bpDuringSymptomDiastolic,
    String? notes,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (patientId != null) 'patient_id': patientId,
      if (loggedAt != null) 'logged_at': loggedAt.toUtc().toIso8601String(),
      if (symptomType != null) 'symptom_type': symptomType,
      if (severity != null) 'severity': severity,
      if (durationMinutes != null) 'duration_minutes': durationMinutes,
      if (position != null) 'position': position,
      if (triggerFactors != null)
        'trigger_factors': triggerFactors.map((e) => e).toList(),
      if (hrDuringSymptom != null) 'hr_during_symptom': hrDuringSymptom,
      if (bpDuringSymptomSystolic != null)
        'bp_during_symptom_systolic': bpDuringSymptomSystolic,
      if (bpDuringSymptomDiastolic != null)
        'bp_during_symptom_diastolic': bpDuringSymptomDiastolic,
      if (notes != null) 'notes': notes,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    String? patientId,
    required DateTime loggedAt,
    required String symptomType,
    required int severity,
    int? durationMinutes,
    String? position,
    List<String>? triggerFactors,
    int? hrDuringSymptom,
    int? bpDuringSymptomSystolic,
    int? bpDuringSymptomDiastolic,
    String? notes,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      loggedAt: loggedAt,
      symptomType: symptomType,
      severity: severity,
      durationMinutes: durationMinutes,
      position: position,
      triggerFactors: triggerFactors,
      hrDuringSymptom: hrDuringSymptom,
      bpDuringSymptomSystolic: bpDuringSymptomSystolic,
      bpDuringSymptomDiastolic: bpDuringSymptomDiastolic,
      notes: notes,
      createdAt: createdAt,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? patientId,
    DateTime? loggedAt,
    String? symptomType,
    int? severity,
    int? durationMinutes,
    String? position,
    List<String>? triggerFactors,
    int? hrDuringSymptom,
    int? bpDuringSymptomSystolic,
    int? bpDuringSymptomDiastolic,
    String? notes,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      loggedAt: loggedAt,
      symptomType: symptomType,
      severity: severity,
      durationMinutes: durationMinutes,
      position: position,
      triggerFactors: triggerFactors,
      hrDuringSymptom: hrDuringSymptom,
      bpDuringSymptomSystolic: bpDuringSymptomSystolic,
      bpDuringSymptomDiastolic: bpDuringSymptomDiastolic,
      notes: notes,
      createdAt: createdAt,
    );
  }

  factory SymptomLogs.fromJson(Map<String, dynamic> jsonn) {
    return SymptomLogs(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      patientId: jsonn['patient_id'] != null
          ? jsonn['patient_id'].toString()
          : null,
      loggedAt: jsonn['logged_at'] != null
          ? DateTime.parse(jsonn['logged_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      symptomType: jsonn['symptom_type'] != null
          ? jsonn['symptom_type'].toString()
          : '',
      severity: jsonn['severity'] != null
          ? int.parse(jsonn['severity'].toString())
          : 0,
      durationMinutes: jsonn['duration_minutes'] != null
          ? int.parse(jsonn['duration_minutes'].toString())
          : null,
      position: jsonn['position'] != null ? jsonn['position'].toString() : null,
      triggerFactors: jsonn['trigger_factors'] != null
          ? (jsonn['trigger_factors'] as List<dynamic>)
                .map((v) => v.toString())
                .toList()
          : null,
      hrDuringSymptom: jsonn['hr_during_symptom'] != null
          ? int.parse(jsonn['hr_during_symptom'].toString())
          : null,
      bpDuringSymptomSystolic: jsonn['bp_during_symptom_systolic'] != null
          ? int.parse(jsonn['bp_during_symptom_systolic'].toString())
          : null,
      bpDuringSymptomDiastolic: jsonn['bp_during_symptom_diastolic'] != null
          ? int.parse(jsonn['bp_during_symptom_diastolic'].toString())
          : null,
      notes: jsonn['notes'] != null ? jsonn['notes'].toString() : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      patientId: patientId,
      loggedAt: loggedAt,
      symptomType: symptomType,
      severity: severity,
      durationMinutes: durationMinutes,
      position: position,
      triggerFactors: triggerFactors,
      hrDuringSymptom: hrDuringSymptom,
      bpDuringSymptomSystolic: bpDuringSymptomSystolic,
      bpDuringSymptomDiastolic: bpDuringSymptomDiastolic,
      notes: notes,
      createdAt: createdAt,
    );
  }
}

class Patients implements SupadartClass<Patients> {
  final String id;
  final String firstName;
  final String lastName;
  final DateTime dateOfBirth;
  final String? email;
  final String? phone;
  final int? heightCm;
  final num? weightKg;
  final DateTime? potsDiagnosisDate;
  final String? primaryCarePhysician;
  final DateTime? createdAt;
  final DateTime? updatedAt;
  final String sexAssignedAtBirth;
  final String reasonForUsingApp;

  const Patients({
    required this.id,
    required this.firstName,
    required this.lastName,
    required this.dateOfBirth,
    this.email,
    this.phone,
    this.heightCm,
    this.weightKg,
    this.potsDiagnosisDate,
    this.primaryCarePhysician,
    this.createdAt,
    this.updatedAt,
    required this.sexAssignedAtBirth,
    required this.reasonForUsingApp,
  });

  static String get table_name => 'patients';
  static String get c_id => 'id';
  static String get c_firstName => 'first_name';
  static String get c_lastName => 'last_name';
  static String get c_dateOfBirth => 'date_of_birth';
  static String get c_email => 'email';
  static String get c_phone => 'phone';
  static String get c_heightCm => 'height_cm';
  static String get c_weightKg => 'weight_kg';
  static String get c_potsDiagnosisDate => 'pots_diagnosis_date';
  static String get c_primaryCarePhysician => 'primary_care_physician';
  static String get c_createdAt => 'created_at';
  static String get c_updatedAt => 'updated_at';
  static String get c_sexAssignedAtBirth => 'sex_assigned_at_birth';
  static String get c_reasonForUsingApp => 'reason_for_using_app';

  static List<Patients> converter(List<Map<String, dynamic>> data) {
    return data.map(Patients.fromJson).toList();
  }

  static Patients converterSingle(Map<String, dynamic> data) {
    return Patients.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? firstName,
    String? lastName,
    DateTime? dateOfBirth,
    String? email,
    String? phone,
    int? heightCm,
    num? weightKg,
    DateTime? potsDiagnosisDate,
    String? primaryCarePhysician,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? sexAssignedAtBirth,
    String? reasonForUsingApp,
  }) {
    return {
      if (id != null) 'id': id,
      if (firstName != null) 'first_name': firstName,
      if (lastName != null) 'last_name': lastName,
      if (dateOfBirth != null) 'date_of_birth': dateOfBirth.toIso8601String(),
      if (email != null) 'email': email,
      if (phone != null) 'phone': phone,
      if (heightCm != null) 'height_cm': heightCm,
      if (weightKg != null) 'weight_kg': weightKg.toString(),
      if (potsDiagnosisDate != null)
        'pots_diagnosis_date': potsDiagnosisDate.toIso8601String(),
      if (primaryCarePhysician != null)
        'primary_care_physician': primaryCarePhysician,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
      if (updatedAt != null) 'updated_at': updatedAt.toUtc().toIso8601String(),
      if (sexAssignedAtBirth != null)
        'sex_assigned_at_birth': sexAssignedAtBirth,
      if (reasonForUsingApp != null) 'reason_for_using_app': reasonForUsingApp,
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    required String firstName,
    required String lastName,
    required DateTime dateOfBirth,
    String? email,
    String? phone,
    int? heightCm,
    num? weightKg,
    DateTime? potsDiagnosisDate,
    String? primaryCarePhysician,
    DateTime? createdAt,
    DateTime? updatedAt,
    required String sexAssignedAtBirth,
    required String reasonForUsingApp,
  }) {
    return _generateMap(
      id: id,
      firstName: firstName,
      lastName: lastName,
      dateOfBirth: dateOfBirth,
      email: email,
      phone: phone,
      heightCm: heightCm,
      weightKg: weightKg,
      potsDiagnosisDate: potsDiagnosisDate,
      primaryCarePhysician: primaryCarePhysician,
      createdAt: createdAt,
      updatedAt: updatedAt,
      sexAssignedAtBirth: sexAssignedAtBirth,
      reasonForUsingApp: reasonForUsingApp,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? firstName,
    String? lastName,
    DateTime? dateOfBirth,
    String? email,
    String? phone,
    int? heightCm,
    num? weightKg,
    DateTime? potsDiagnosisDate,
    String? primaryCarePhysician,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? sexAssignedAtBirth,
    String? reasonForUsingApp,
  }) {
    return _generateMap(
      id: id,
      firstName: firstName,
      lastName: lastName,
      dateOfBirth: dateOfBirth,
      email: email,
      phone: phone,
      heightCm: heightCm,
      weightKg: weightKg,
      potsDiagnosisDate: potsDiagnosisDate,
      primaryCarePhysician: primaryCarePhysician,
      createdAt: createdAt,
      updatedAt: updatedAt,
      sexAssignedAtBirth: sexAssignedAtBirth,
      reasonForUsingApp: reasonForUsingApp,
    );
  }

  factory Patients.fromJson(Map<String, dynamic> jsonn) {
    return Patients(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      firstName: jsonn['first_name'] != null
          ? jsonn['first_name'].toString()
          : '',
      lastName: jsonn['last_name'] != null ? jsonn['last_name'].toString() : '',
      dateOfBirth: jsonn['date_of_birth'] != null
          ? DateTime.parse(jsonn['date_of_birth'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      email: jsonn['email'] != null ? jsonn['email'].toString() : null,
      phone: jsonn['phone'] != null ? jsonn['phone'].toString() : null,
      heightCm: jsonn['height_cm'] != null
          ? int.parse(jsonn['height_cm'].toString())
          : null,
      weightKg: jsonn['weight_kg'] != null
          ? num.parse(jsonn['weight_kg'].toString())
          : null,
      potsDiagnosisDate: jsonn['pots_diagnosis_date'] != null
          ? DateTime.parse(jsonn['pots_diagnosis_date'].toString())
          : null,
      primaryCarePhysician: jsonn['primary_care_physician'] != null
          ? jsonn['primary_care_physician'].toString()
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
      updatedAt: jsonn['updated_at'] != null
          ? DateTime.parse(jsonn['updated_at'].toString())
          : null,
      sexAssignedAtBirth: jsonn['sex_assigned_at_birth'] != null
          ? jsonn['sex_assigned_at_birth'].toString()
          : '',
      reasonForUsingApp: jsonn['reason_for_using_app'] != null
          ? jsonn['reason_for_using_app'].toString()
          : '',
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      firstName: firstName,
      lastName: lastName,
      dateOfBirth: dateOfBirth,
      email: email,
      phone: phone,
      heightCm: heightCm,
      weightKg: weightKg,
      potsDiagnosisDate: potsDiagnosisDate,
      primaryCarePhysician: primaryCarePhysician,
      createdAt: createdAt,
      updatedAt: updatedAt,
      sexAssignedAtBirth: sexAssignedAtBirth,
      reasonForUsingApp: reasonForUsingApp,
    );
  }
}

class HeartrateData implements SupadartClass<HeartrateData> {
  final String id;
  final String? patientId;
  final String deviceId;
  final DateTime recordedAt;
  final int heartRate;
  final bool? rrAvailable;
  final int? rrIntervalMs;
  final bool? contactStatus;
  final bool? contactStatusSupported;
  final int? signalQuality;
  final DateTime? createdAt;

  const HeartrateData({
    required this.id,
    this.patientId,
    required this.deviceId,
    required this.recordedAt,
    required this.heartRate,
    this.rrAvailable,
    this.rrIntervalMs,
    this.contactStatus,
    this.contactStatusSupported,
    this.signalQuality,
    this.createdAt,
  });

  static String get table_name => 'heartrate_data';
  static String get c_id => 'id';
  static String get c_patientId => 'patient_id';
  static String get c_deviceId => 'device_id';
  static String get c_recordedAt => 'recorded_at';
  static String get c_heartRate => 'heart_rate';
  static String get c_rrAvailable => 'rr_available';
  static String get c_rrIntervalMs => 'rr_interval_ms';
  static String get c_contactStatus => 'contact_status';
  static String get c_contactStatusSupported => 'contact_status_supported';
  static String get c_signalQuality => 'signal_quality';
  static String get c_createdAt => 'created_at';

  static List<HeartrateData> converter(List<Map<String, dynamic>> data) {
    return data.map(HeartrateData.fromJson).toList();
  }

  static HeartrateData converterSingle(Map<String, dynamic> data) {
    return HeartrateData.fromJson(data);
  }

  static Map<String, dynamic> _generateMap({
    String? id,
    String? patientId,
    String? deviceId,
    DateTime? recordedAt,
    int? heartRate,
    bool? rrAvailable,
    int? rrIntervalMs,
    bool? contactStatus,
    bool? contactStatusSupported,
    int? signalQuality,
    DateTime? createdAt,
  }) {
    return {
      if (id != null) 'id': id,
      if (patientId != null) 'patient_id': patientId,
      if (deviceId != null) 'device_id': deviceId,
      if (recordedAt != null)
        'recorded_at': recordedAt.toUtc().toIso8601String(),
      if (heartRate != null) 'heart_rate': heartRate,
      if (rrAvailable != null) 'rr_available': rrAvailable,
      if (rrIntervalMs != null) 'rr_interval_ms': rrIntervalMs,
      if (contactStatus != null) 'contact_status': contactStatus,
      if (contactStatusSupported != null)
        'contact_status_supported': contactStatusSupported,
      if (signalQuality != null) 'signal_quality': signalQuality,
      if (createdAt != null) 'created_at': createdAt.toUtc().toIso8601String(),
    };
  }

  static Map<String, dynamic> insert({
    String? id,
    String? patientId,
    required String deviceId,
    required DateTime recordedAt,
    required int heartRate,
    bool? rrAvailable,
    int? rrIntervalMs,
    bool? contactStatus,
    bool? contactStatusSupported,
    int? signalQuality,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      deviceId: deviceId,
      recordedAt: recordedAt,
      heartRate: heartRate,
      rrAvailable: rrAvailable,
      rrIntervalMs: rrIntervalMs,
      contactStatus: contactStatus,
      contactStatusSupported: contactStatusSupported,
      signalQuality: signalQuality,
      createdAt: createdAt,
    );
  }

  static Map<String, dynamic> update({
    String? id,
    String? patientId,
    String? deviceId,
    DateTime? recordedAt,
    int? heartRate,
    bool? rrAvailable,
    int? rrIntervalMs,
    bool? contactStatus,
    bool? contactStatusSupported,
    int? signalQuality,
    DateTime? createdAt,
  }) {
    return _generateMap(
      id: id,
      patientId: patientId,
      deviceId: deviceId,
      recordedAt: recordedAt,
      heartRate: heartRate,
      rrAvailable: rrAvailable,
      rrIntervalMs: rrIntervalMs,
      contactStatus: contactStatus,
      contactStatusSupported: contactStatusSupported,
      signalQuality: signalQuality,
      createdAt: createdAt,
    );
  }

  factory HeartrateData.fromJson(Map<String, dynamic> jsonn) {
    return HeartrateData(
      id: jsonn['id'] != null ? jsonn['id'].toString() : '',
      patientId: jsonn['patient_id'] != null
          ? jsonn['patient_id'].toString()
          : null,
      deviceId: jsonn['device_id'] != null ? jsonn['device_id'].toString() : '',
      recordedAt: jsonn['recorded_at'] != null
          ? DateTime.parse(jsonn['recorded_at'].toString())
          : DateTime.fromMillisecondsSinceEpoch(0),
      heartRate: jsonn['heart_rate'] != null
          ? int.parse(jsonn['heart_rate'].toString())
          : 0,
      rrAvailable: jsonn['rr_available'] != null
          ? jsonn['rr_available'] as bool
          : null,
      rrIntervalMs: jsonn['rr_interval_ms'] != null
          ? int.parse(jsonn['rr_interval_ms'].toString())
          : null,
      contactStatus: jsonn['contact_status'] != null
          ? jsonn['contact_status'] as bool
          : null,
      contactStatusSupported: jsonn['contact_status_supported'] != null
          ? jsonn['contact_status_supported'] as bool
          : null,
      signalQuality: jsonn['signal_quality'] != null
          ? int.parse(jsonn['signal_quality'].toString())
          : null,
      createdAt: jsonn['created_at'] != null
          ? DateTime.parse(jsonn['created_at'].toString())
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return _generateMap(
      id: id,
      patientId: patientId,
      deviceId: deviceId,
      recordedAt: recordedAt,
      heartRate: heartRate,
      rrAvailable: rrAvailable,
      rrIntervalMs: rrIntervalMs,
      contactStatus: contactStatus,
      contactStatusSupported: contactStatusSupported,
      signalQuality: signalQuality,
      createdAt: createdAt,
    );
  }
}
